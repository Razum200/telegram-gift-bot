# monitor_multi_advanced.py ‚Äî v2.4 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º

import asyncio
import os
import json
import argparse
from datetime import datetime
from telethon import TelegramClient, functions, types, errors
from config import API_ID, API_HASH, SESSION_NAME, ADMIN_USERNAME, EMERGENCY_USERNAME, HEARTBEAT_INTERVAL, ENABLE_HEARTBEAT

CHECK_INTERVAL = 10
seen_gifts = {}
pending_gifts = {}
last_bought = {}
purchase_summary = {}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∂–∏–≤–æ—Å—Ç–∏
last_heartbeat = 0
bot_start_time = None

def smart_sort_gifts(pending_gifts, last_bought_peer=None):
    """
    –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:
    1. –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ
    2. –°—Ä–µ–¥–∏ –æ–¥–Ω–æ–π —Ü–µ–Ω—ã - —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ (–∏–∑–±–µ–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É–ø–ª–µ–Ω–Ω—ã–π)
    """
    if not pending_gifts:
        return []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    price_groups = {}
    for gid, (price, remain) in pending_gifts.items():
        if remain is None or remain > 0:  # –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            if price not in price_groups:
                price_groups[price] = []
            price_groups[price].append((gid, price, remain))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    sorted_prices = sorted(price_groups.keys(), reverse=True)
    
    result = []
    for price in sorted_prices:
        gifts = price_groups[price]
        # –°—Ä–µ–¥–∏ –æ–¥–Ω–æ–π —Ü–µ–Ω—ã - –∏–∑–±–µ–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É–ø–ª–µ–Ω–Ω—ã–π
        if last_bought_peer and len(gifts) > 1:
            # –°–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
            not_last = [g for g in gifts if g[0] != last_bought_peer]
            last_ones = [g for g in gifts if g[0] == last_bought_peer]
            gifts = not_last + last_ones
        
        result.extend(gifts)
    
    return result

async def send_admin_notification(client, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–±–µ–∑ –∑–≤—É–∫–∞)"""
    try:
        await client.send_message(ADMIN_USERNAME, message)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def send_emergency_notification(client, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≠–ö–°–¢–†–ï–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ—à–∏–±–∫–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è - —Å–æ –∑–≤—É–∫–æ–º)"""
    try:
        await client.send_message(EMERGENCY_USERNAME, f"üö® –≠–ö–°–¢–†–ï–ù–ù–û! üö®\n{message}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        try:
            await client.send_message(ADMIN_USERNAME, f"üö® –≠–ö–°–¢–†–ï–ù–ù–û! üö®\n{message}")
        except:
            pass

async def send_heartbeat(client, iteration, gifts_count, active_peers):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∂–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    if not ENABLE_HEARTBEAT:
        return
    
    global last_heartbeat, bot_start_time
    now = datetime.now().timestamp()
    
    if now - last_heartbeat >= HEARTBEAT_INTERVAL:
        uptime = datetime.now() - bot_start_time if bot_start_time else None
        uptime_str = str(uptime).split('.')[0] if uptime else "unknown"
        
        message = f"üíö –ë–æ—Ç –∂–∏–≤!\n"
        message += f"üïê –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}\n"
        message += f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}\n"
        message += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {gifts_count}\n"
        message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_peers}\n"
        message += f"üìÖ {datetime.now().strftime('%H:%M:%S')}"
        
        await send_admin_notification(client, message)
        last_heartbeat = now

async def get_current_gifts(client):
    gifts = {}
    try:
        result = await client(functions.payments.GetStarGiftsRequest(hash=0))
        for gift in result.gifts:
            price = gift.stars
            remain = getattr(gift, "availability_remains", None)
            gifts[gift.id] = (price, remain)
    except errors.RPCError as e:
        print(f"[ERROR get_current_gifts] {e}")
    return gifts

async def purchase_gift_for_peer(client, peer, gift_id, price):
    try:
        peer_entity = await client.get_input_entity(peer)
        invoice = types.InputInvoiceStarGift(peer_entity, gift_id, None, False)
        payment_form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))
        await client(functions.payments.SendStarsFormRequest(payment_form.form_id, invoice))
        print(f"[PURCHASE] Peer={peer} –∫—É–ø–∏–ª GiftID={gift_id} –∑–∞ {price}‚≠ê")
        purchase_summary.setdefault(peer, {})
        purchase_summary[peer][price] = purchase_summary[peer].get(price, 0) + 1
        return True
    except errors.RPCError as e:
        if "BALANCE_TOO_LOW" in str(e):
            return "low"
        print(f"[ERROR purchase_gift_for_peer] {e}")
        return False

def write_purchase_log(path="purchase_log.txt"):
    if not purchase_summary:
        return
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"=== {timestamp} ===\n")
        for peer, purchases in purchase_summary.items():
            f.write(f"{peer}:\n")
            print(f"{peer}:")
            for price, count in sorted(purchases.items()):
                word = "–ø–æ–¥–∞—Ä–∫–æ–≤" if count > 1 else "–ø–æ–¥–∞—Ä–æ–∫"
                line = f"  {count} {word} –ø–æ {price}‚≠ê"
                f.write(line + "\n")
                print(line)
        f.write("\n")

def load_budgets(path="budgets.json"):
    if not os.path.exists(path):
        print(f"[ERROR] –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}

    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if not content:
            print(f"[ERROR] –§–∞–π–ª {path} –ø—É—Å—Ç–æ–π.")
            return {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
        if not (content.startswith('{') and content.endswith('}')):
            print(f"[ERROR] –§–∞–π–ª {path} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON.")
            return {}

        data = json.loads(content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(data, dict):
            print(f"[ERROR] –§–∞–π–ª {path} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç (dict), –∞ –Ω–µ {type(data).__name__}.")
            return {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for peer, info in data.items():
            if not isinstance(info, dict):
                print(f"[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {peer} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            info.setdefault("spent", 0)
            info.setdefault("min_price", 0)
            info.setdefault("max_price", float('inf'))
            info.setdefault("filters", [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if "budget" not in info:
                print(f"[WARNING] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {peer} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'budget', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0.")
                info["budget"] = 0

        print(f"[INFO] –§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}")
        return data

    except json.JSONDecodeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ {path}: {e}")
        return {}
    except Exception as e:
        print(f"[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path}: {e}")
        return {}

def save_budgets(data, path="budgets.json"):
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if os.path.exists(path):
            backup_path = f"{path}.backup"
            import shutil
            shutil.copy2(path, backup_path)
            print(f"[INFO] –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_path = f"{path}.tmp"
        with open(temp_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if os.path.exists(temp_path):
            with open(temp_path, "r", encoding="utf-8") as f:
                test_data = json.load(f)
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.replace(temp_path, path)
            print(f"[INFO] –§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}")
        else:
            raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

    except json.JSONDecodeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ JSON: {e}")
        if os.path.exists(temp_path):
            os.remove(temp_path)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {path}: {e}")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--allow-unlimited", action="store_true", default=False)
    args = parser.parse_args()

    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    await client.start()

    global seen_gifts, pending_gifts, last_bought, purchase_summary, bot_start_time
    bot_start_time = datetime.now()
    
    budgets = load_budgets()
    if not budgets:
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—Ç–∞—Ä—Ç–µ
    await send_admin_notification(client, f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (—á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ –±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª)
    active_channels = len([p for p in budgets.keys() if budgets[p]['budget'] > 0])
    await send_emergency_notification(client, f"–ë–û–¢ –ó–ê–ü–£–©–ï–ù!\nüöÄ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_channels}")
    peers = list(budgets.keys())
    last_bought = {p: None for p in peers}
    filter_counters = {p: [0]*len(budgets[p].get("filters", [])) for p in peers}

    current = await get_current_gifts(client)
    seen_gifts = {gid: None for gid, (_, remain) in current.items() if remain is not None}
    with open("seen_gifts.json", "w", encoding="utf-8") as f:
        json.dump(list(seen_gifts.keys()), f)

    print("[INFO] –ö–∞–Ω–∞–ª—ã –∏ –ª–∏–º–∏—Ç—ã:")
    for peer in peers:
        b = budgets[peer]["budget"]
        s = budgets[peer]["spent"]
        mn = budgets[peer].get("min_price", 0)
        mx = budgets[peer].get("max_price", float('inf'))
        print(f"  {peer}: spent={s}/{b}, range=[{mn}‚Äì{mx}]")

    print("[INFO] –°—Ç–∞—Ä—Ç–æ–≤—ã–µ finite-–ø–æ–¥–∞—Ä–∫–∏:")
    for gid, (price, remain) in current.items():
        if remain is not None:
            print(f"  ID={gid}, —Ü–µ–Ω–∞={price}‚≠ê, –æ—Å—Ç–∞–ª–æ—Å—å={remain}")

    iteration = 0
    while True:
        try:
            new_budgets = load_budgets()
            for peer in new_budgets:
                if peer in budgets:
                    new_budgets[peer]["spent"] = budgets[peer].get("spent", 0)
            budgets = new_budgets
            peers = list(budgets.keys())
            last_bought = {p: last_bought.get(p) for p in peers}

            current_gifts = await get_current_gifts(client)
            for gid, (price, remain) in current_gifts.items():
                if gid in seen_gifts:
                    continue
                if remain is not None:
                    seen_gifts[gid] = None
                    pending_gifts[gid] = [price, remain]
                    message = f"üö® –ù–û–í–´–ô –ü–û–î–ê–†–û–ö!\nüéÅ ID: {gid}\nüí∞ –¶–µ–Ω–∞: {price}‚≠ê\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: {remain}"
                    print(f"[INFO] –ù–æ–≤—ã–π finite-–ø–æ–¥–∞—Ä–æ–∫: ID={gid}, —Ü–µ–Ω–∞={price}‚≠ê, –æ—Å—Ç–∞–ª–æ—Å—å={remain}")
                    await send_admin_notification(client, message)
                elif args.allow_unlimited:
                    seen_gifts[gid] = None
                    pending_gifts[gid] = [price, None]
                    message = f"üö® –ù–û–í–´–ô –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô –ü–û–î–ê–†–û–ö!\nüéÅ ID: {gid}\nüí∞ –¶–µ–Ω–∞: {price}‚≠ê\n‚ôæÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
                    await send_admin_notification(client, message)

            with open("seen_gifts.json", "w", encoding="utf-8") as f:
                json.dump(list(seen_gifts.keys()), f)

            bought_something = True
            while bought_something:
                bought_something = False
                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ —Å 0 –æ—Å—Ç–∞—Ç–∫–æ–º
                for gid in list(pending_gifts.keys()):
                    price, remain = pending_gifts[gid]
                    if remain is not None and remain <= 0:
                        del pending_gifts[gid]

                for peer in peers:
                    info = budgets[peer]
                    budget, spent = info["budget"], info["spent"]
                    available = budget - spent
                    if available <= 0:
                        continue

                    filters = info.get("filters")
                    if filters:
                        for i, f in enumerate(filters):
                            limit = f.get("limit", 0)
                            max_price = f.get("max_price", float('inf'))
                            max_remain = f.get("max_remain", float('inf'))

                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏ –±—é–¥–∂–µ—Ç
                            while filter_counters[peer][i] < limit and available > 0:
                                bought_count = filter_counters[peer][i]
                                can_buy = limit - bought_count
                                if can_buy <= 0:
                                    break

                                # –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞, —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ü–µ–Ω
                                sorted_gifts = smart_sort_gifts(pending_gifts, last_bought.get(peer))
                                
                                gift_bought = False
                                for gid, price, remain in sorted_gifts:
                                    if remain is not None and remain <= 0:
                                        continue
                                    if price > max_price or (remain is not None and remain > max_remain):
                                        continue
                                    if price > available:
                                        continue

                                    # –ü–æ–∫—É–ø–∞–µ–º –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                                    status = await purchase_gift_for_peer(client, peer, gid, price)
                                    if status is True:
                                        budgets[peer]["spent"] += price
                                        try:
                                            save_budgets(budgets)
                                        except Exception as e:
                                            print(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {e}")
                                            await send_emergency_notification(client, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã: {e}")
                                        last_bought[peer] = gid
                                        filter_counters[peer][i] += 1
                                        available -= price
                                        bought_something = True
                                        gift_bought = True
                                        remain = remain - 1 if remain is not None else None
                                        if remain == 0:
                                            pending_gifts.pop(gid)
                                        else:
                                            pending_gifts[gid] = [price, remain]
                                        try:
                                            await client.send_message(peer, f"‚úÖ Gift ID={gid} –∫—É–ø–ª–µ–Ω –∑–∞ {price}‚≠ê. –û—Å—Ç–∞–ª–æ—Å—å {remain}.")
                                        except:
                                            pass
                                        break  # –ö—É–ø–∏–ª–∏ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ while
                                    elif status == "low":
                                        budgets[peer]["spent"] = budget
                                        try:
                                            save_budgets(budgets)
                                        except Exception as e:
                                            print(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –∑–≤–µ–∑–¥: {e}")
                                            await send_emergency_notification(client, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã: {e}")
                                        await send_emergency_notification(client, f"–ù–ï–•–í–ê–¢–ö–ê –ó–í–Å–ó–î!\nüí∞ –ö–∞–Ω–∞–ª {peer} –∏—Å—á–µ—Ä–ø–∞–ª –±–∞–ª–∞–Ω—Å\n‚≠ê –ë—é–¥–∂–µ—Ç: {budget}")
                                        break
                                    else:
                                        continue  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
                                
                                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ while
                                if not gift_bought:
                                    break
                        continue

                    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫)
                    mn, mx = info.get("min_price", 0), info.get("max_price", float('inf'))
                    chosen_gid = None
                    
                    # –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞, —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ü–µ–Ω
                    sorted_gifts = smart_sort_gifts(pending_gifts, last_bought.get(peer))

                    
                    chosen_price = None
                    chosen_remain = None
                    for gid, price, remain in sorted_gifts:
                        if remain is not None and remain <= 0:
                            continue
                        if not (mn <= price <= mx) or price > available:
                            continue
                        chosen_gid = gid
                        chosen_price = price
                        chosen_remain = remain
                        break

                    if chosen_gid is None and last_bought.get(peer) in pending_gifts:
                        price0, remain0 = pending_gifts[last_bought[peer]]
                        if (remain0 is None or remain0 > 0) and (mn <= price0 <= mx) and price0 <= available:
                            chosen_gid = last_bought[peer]
                            chosen_price = price0
                            chosen_remain = remain0

                    if chosen_gid is None:
                        continue

                    price = chosen_price
                    remain = chosen_remain
                    status = await purchase_gift_for_peer(client, peer, chosen_gid, price)
                    if status is True:
                        budgets[peer]["spent"] += price
                        try:
                            save_budgets(budgets)
                        except Exception as e:
                            print(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {e}")
                            await send_emergency_notification(client, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã: {e}")
                        last_bought[peer] = chosen_gid
                        if remain is not None:
                            remain -= 1
                        pending_gifts.pop(chosen_gid)
                        if remain is None or remain > 0:
                            pending_gifts[chosen_gid] = [price, remain]
                        bought_something = True
                        try:
                            await client.send_message(peer, f"Gift ID={chosen_gid} –∫—É–ø–ª–µ–Ω –∑–∞ {price}‚≠ê. –û—Å—Ç–∞–ª–æ—Å—å {remain}.")
                        except:
                            pass
                    elif status == "low":
                        budgets[peer]["spent"] = budget
                        try:
                            save_budgets(budgets)
                        except Exception as e:
                            print(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {e}")
                            await send_emergency_notification(client, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç—ã: {e}")
                        await send_emergency_notification(client, f"–ù–ï–•–í–ê–¢–ö–ê –ó–í–Å–ó–î!\nüí∞ –ö–∞–Ω–∞–ª {peer} –∏—Å—á–µ—Ä–ø–∞–ª –±–∞–ª–∞–Ω—Å\n‚≠ê –ë—é–¥–∂–µ—Ç: {budget}")

            write_purchase_log()
            purchase_summary.clear()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
            active_peers = len([p for p in peers if budgets[p]["budget"] - budgets[p]["spent"] > 0])
            await send_heartbeat(client, iteration, len(pending_gifts), active_peers)

            iteration += 1
            if iteration % 3 == 0:
                print(f"[DEBUG] –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥—ë–º {CHECK_INTERVAL} —Å–µ–∫...")

            await asyncio.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            error_msg = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n‚ùå {str(e)}\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫..."
            print(f"[ERROR] {e}")
            await send_emergency_notification(client, error_msg)
            await asyncio.sleep(30)

if __name__ == "__main__":
    asyncio.run(main())
#python -m venv venv —Å–∫–∞—á–∞—Ç—å
#source venv/bin/activate –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
#python monitor_multi_advanced.py —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å 
#python monitor_multi_advanced.py --allow-unlimited —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–∫–∞—Ö 

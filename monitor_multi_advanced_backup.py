# monitor_multi_advanced.py ‚Äî v2.4 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º

import asyncio
import os
import json
import argparse
from datetime import datetime
from telethon import TelegramClient, functions, types, errors
from config import API_ID, API_HASH, SESSION_NAME, ADMIN_USERNAME, HEARTBEAT_INTERVAL, ENABLE_HEARTBEAT

CHECK_INTERVAL = 10
seen_gifts = {}
pending_gifts = {}
last_bought = {}
purchase_summary = {}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∂–∏–≤–æ—Å—Ç–∏
last_heartbeat = 0
bot_start_time = None

async def send_admin_notification(client, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await client.send_message(ADMIN_USERNAME, message)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def send_heartbeat(client, iteration, gifts_count, active_peers):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∂–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    if not ENABLE_HEARTBEAT:
        return
    
    global last_heartbeat, bot_start_time
    now = datetime.now().timestamp()
    
    if now - last_heartbeat >= HEARTBEAT_INTERVAL:
        uptime = datetime.now() - bot_start_time if bot_start_time else None
        uptime_str = str(uptime).split('.')[0] if uptime else "unknown"
        
        message = f"üíö –ë–æ—Ç –∂–∏–≤!\n"
        message += f"üïê –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}\n"
        message += f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}\n"
        message += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {gifts_count}\n"
        message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_peers}\n"
        message += f"üìÖ {datetime.now().strftime('%H:%M:%S')}"
        
        await send_admin_notification(client, message)
        last_heartbeat = now

async def get_current_gifts(client):
    gifts = {}
    try:
        result = await client(functions.payments.GetStarGiftsRequest(hash=0))
        for gift in result.gifts:
            price = gift.stars
            remain = getattr(gift, "availability_remains", None)
            gifts[gift.id] = (price, remain)
    except errors.RPCError as e:
        print(f"[ERROR get_current_gifts] {e}")
    return gifts

async def purchase_gift_for_peer(client, peer, gift_id, price):
    try:
        peer_entity = await client.get_input_entity(peer)
        invoice = types.InputInvoiceStarGift(peer_entity, gift_id, None, False)
        payment_form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))
        await client(functions.payments.SendStarsFormRequest(payment_form.form_id, invoice))
        print(f"[PURCHASE] Peer={peer} –∫—É–ø–∏–ª GiftID={gift_id} –∑–∞ {price}‚≠ê")
        purchase_summary.setdefault(peer, {})
        purchase_summary[peer][price] = purchase_summary[peer].get(price, 0) + 1
        return True
    except errors.RPCError as e:
        if "BALANCE_TOO_LOW" in str(e):
            return "low"
        print(f"[ERROR purchase_gift_for_peer] {e}")
        return False

def write_purchase_log(path="purchase_log.txt"):
    if not purchase_summary:
        return
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"=== {timestamp} ===\n")
        for peer, purchases in purchase_summary.items():
            f.write(f"{peer}:\n")
            print(f"{peer}:")
            for price, count in sorted(purchases.items()):
                word = "–ø–æ–¥–∞—Ä–∫–æ–≤" if count > 1 else "–ø–æ–¥–∞—Ä–æ–∫"
                line = f"  {count} {word} –ø–æ {price}‚≠ê"
                f.write(line + "\n")
                print(line)
        f.write("\n")

def load_budgets(path="budgets.json"):
    if not os.path.exists(path):
        print(f"[ERROR] –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    for peer, info in data.items():
        info.setdefault("spent", 0)
        info.setdefault("min_price", 0)
        info.setdefault("max_price", float('inf'))
        info.setdefault("filters", [])
    return data

def save_budgets(data, path="budgets.json"):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--allow-unlimited", action="store_true", default=False)
    args = parser.parse_args()

    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    await client.start()

    global seen_gifts, pending_gifts, last_bought, purchase_summary, bot_start_time
    bot_start_time = datetime.now()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—Ç–∞—Ä—Ç–µ
    await send_admin_notification(client, f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    budgets = load_budgets()
    if not budgets:
        return
    peers = list(budgets.keys())
    last_bought = {p: None for p in peers}
    filter_counters = {p: [0]*len(budgets[p].get("filters", [])) for p in peers}

    current = await get_current_gifts(client)
    seen_gifts = {gid: None for gid, (_, remain) in current.items() if remain is not None}
    with open("seen_gifts.json", "w", encoding="utf-8") as f:
        json.dump(list(seen_gifts.keys()), f)

    print("[INFO] –ö–∞–Ω–∞–ª—ã –∏ –ª–∏–º–∏—Ç—ã:")
    for peer in peers:
        b = budgets[peer]["budget"]
        s = budgets[peer]["spent"]
        mn = budgets[peer].get("min_price", 0)
        mx = budgets[peer].get("max_price", float('inf'))
        print(f"  {peer}: spent={s}/{b}, range=[{mn}‚Äì{mx}]")

    print("[INFO] –°—Ç–∞—Ä—Ç–æ–≤—ã–µ finite-–ø–æ–¥–∞—Ä–∫–∏:")
    for gid, (price, remain) in current.items():
        if remain is not None:
            print(f"  ID={gid}, —Ü–µ–Ω–∞={price}‚≠ê, –æ—Å—Ç–∞–ª–æ—Å—å={remain}")

    iteration = 0
    while True:
        try:
            new_budgets = load_budgets()
            for peer in new_budgets:
                if peer in budgets:
                    new_budgets[peer]["spent"] = budgets[peer].get("spent", 0)
            budgets = new_budgets
            peers = list(budgets.keys())
            last_bought = {p: last_bought.get(p) for p in peers}

            current_gifts = await get_current_gifts(client)
            for gid, (price, remain) in current_gifts.items():
                if gid in seen_gifts:
                    continue
                if remain is not None:
                    seen_gifts[gid] = None
                    pending_gifts[gid] = [price, remain]
                    message = f"üö® –ù–û–í–´–ô –ü–û–î–ê–†–û–ö!\nüéÅ ID: {gid}\nüí∞ –¶–µ–Ω–∞: {price}‚≠ê\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: {remain}"
                    print(f"[INFO] –ù–æ–≤—ã–π finite-–ø–æ–¥–∞—Ä–æ–∫: ID={gid}, —Ü–µ–Ω–∞={price}‚≠ê, –æ—Å—Ç–∞–ª–æ—Å—å={remain}")
                    await send_admin_notification(client, message)
                elif args.allow_unlimited:
                    seen_gifts[gid] = None
                    pending_gifts[gid] = [price, None]
                    message = f"üö® –ù–û–í–´–ô –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô –ü–û–î–ê–†–û–ö!\nüéÅ ID: {gid}\nüí∞ –¶–µ–Ω–∞: {price}‚≠ê\n‚ôæÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
                    await send_admin_notification(client, message)

            with open("seen_gifts.json", "w", encoding="utf-8") as f:
                json.dump(list(seen_gifts.keys()), f)

            bought_something = True
            while bought_something:
                bought_something = False
                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ —Å 0 –æ—Å—Ç–∞—Ç–∫–æ–º
                for gid in list(pending_gifts.keys()):
                    price, remain = pending_gifts[gid]
                    if remain is not None and remain <= 0:
                        del pending_gifts[gid]

                for peer in peers:
                    info = budgets[peer]
                    budget, spent = info["budget"], info["spent"]
                    available = budget - spent
                    if available <= 0:
                        continue

                    filters = info.get("filters")
                if filters:
                    for i, f in enumerate(filters):
                        limit = f.get("limit", 0)
                        bought_count = filter_counters[peer][i]
                        can_buy = limit - bought_count
                        if can_buy <= 0:
                            continue

                        max_price = f.get("max_price", float('inf'))
                        max_remain = f.get("max_remain", float('inf'))

                        for gid, (price, remain) in list(pending_gifts.items()):
                            if remain is not None and remain <= 0:
                                continue
                            if price > max_price or (remain is not None and remain > max_remain):
                                continue
                            if price > available:
                                continue
                            if gid == last_bought.get(peer):
                                continue

                            max_gifts_by_budget = available // price
                            max_gifts = min(can_buy, max_gifts_by_budget)
                            if remain is not None:
                                max_gifts = min(max_gifts, remain)

                            if max_gifts <= 0:
                                continue

                            for _ in range(max_gifts):
                                status = await purchase_gift_for_peer(client, peer, gid, price)
                                if status is True:
                                    budgets[peer]["spent"] += price
                                    save_budgets(budgets)
                                    last_bought[peer] = gid
                                    filter_counters[peer][i] += 1
                                    available -= price
                                    bought_something = True
                                    remain = remain - 1 if remain is not None else None
                                    if remain == 0:
                                        pending_gifts.pop(gid)
                                        break
                                    else:
                                        pending_gifts[gid] = [price, remain]
                                    try:
                                        await client.send_message(peer, f"‚úÖ Gift ID={gid} –∫—É–ø–ª–µ–Ω –∑–∞ {price}‚≠ê. –û—Å—Ç–∞–ª–æ—Å—å {remain}.")
                                    except:
                                        pass
                                elif status == "low":
                                    budgets[peer]["spent"] = budget
                                    save_budgets(budgets)
                                    break
                                else:
                                    break
                            if available <= 0 or filter_counters[peer][i] >= limit:
                                break
                    continue

                # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫)
                mn, mx = info.get("min_price", 0), info.get("max_price", float('inf'))
                chosen_gid = None
                for gid, (price, remain) in pending_gifts.items():
                    if remain is not None and remain <= 0:
                        continue
                    if not (mn <= price <= mx) or price > available:
                        continue
                    if gid == last_bought.get(peer):
                        continue
                    chosen_gid = gid
                    break

                if chosen_gid is None and last_bought.get(peer) in pending_gifts:
                    price0, remain0 = pending_gifts[last_bought[peer]]
                    if (remain0 is None or remain0 > 0) and (mn <= price0 <= mx) and price0 <= available:
                        chosen_gid = last_bought[peer]

                if chosen_gid is None:
                    continue

                price, remain = pending_gifts[chosen_gid]
                status = await purchase_gift_for_peer(client, peer, chosen_gid, price)
                if status is True:
                    budgets[peer]["spent"] += price
                    save_budgets(budgets)
                    last_bought[peer] = chosen_gid
                    if remain is not None:
                        remain -= 1
                    pending_gifts.pop(chosen_gid)
                    if remain is None or remain > 0:
                        pending_gifts[chosen_gid] = [price, remain]
                    bought_something = True
                    try:
                        await client.send_message(peer, f"Gift ID={chosen_gid} –∫—É–ø–ª–µ–Ω –∑–∞ {price}‚≠ê. –û—Å—Ç–∞–ª–æ—Å—å {remain}.")
                    except:
                        pass
                                elif status == "low":
                                    budgets[peer]["spent"] = budget
                                    save_budgets(budgets)

            write_purchase_log()
            purchase_summary.clear()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
            active_peers = len([p for p in peers if budgets[p]["budget"] - budgets[p]["spent"] > 0])
            await send_heartbeat(client, iteration, len(pending_gifts), active_peers)

            iteration += 1
            if iteration % 3 == 0:
                print(f"[DEBUG] –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥—ë–º {CHECK_INTERVAL} —Å–µ–∫...")

            await asyncio.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            error_msg = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n‚ùå {str(e)}\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫..."
            print(f"[ERROR] {e}")
            await send_admin_notification(client, error_msg)
            await asyncio.sleep(30)

if __name__ == "__main__":
    asyncio.run(main())
#python -m venv venv —Å–∫–∞—á–∞—Ç—å
#source venv/bin/activate –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
#python monitor_multi_advanced.py —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å 
#python monitor_multi_advanced.py --allow-unlimited —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–∫–∞—Ö 
